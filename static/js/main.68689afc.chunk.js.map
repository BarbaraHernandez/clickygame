{"version":3,"sources":["components/Navbar/index.js","components/Header/index.js","components/Images/index.js","components/game/index.js","App.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","instruction","gameScore","Header","id","Wire","onClick","handleOnClick","alt","src","image","Game","state","wires","shuffle","lastImageSet","sort","Math","random","resetGame","map","wire","clicked","loseGame","wireMap","resetWires","_this","setState","winGame","continueGame","event","imageSet","this","_this2","Navbar","components_Header","Images","key","Component","App","game","ReactDOM","render","src_App","document","getElementById"],"mappings":"ivBAaeA,MAVf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,kDAAjC,oBACAJ,EAAAC,EAAAC,cAAA,SAAIH,EAAMM,aACVL,EAAAC,EAAAC,cAAA,mBAAWH,EAAMO,UAAjB,aCMOC,MAXf,SAAgBR,GACd,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYK,GAAG,cAC5BR,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,+FCCOO,MANf,SAAcV,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKQ,QAAS,kBAAMX,EAAMY,cAAcZ,EAAMS,KAAKI,IAAI,GAAGC,IAAKd,EAAMe,gBC2G1DC,6MAxGXC,MAAQ,CACJC,QACAZ,YAAa,6BACbC,UAAW,KAUfY,QAAU,SAAAC,GAER,OADeA,EAAaC,KAAK,WAAO,MAAO,GAAMC,KAAKC,cAM5DC,UAAY,SAAAJ,GAKV,OAJeA,EAAaK,IAAI,SAAAC,GAE9B,OADAA,EAAKC,SAAU,EACRD,OAOXE,SAAW,SAAAC,GACT,IAAMC,EAAaC,EAAKP,UAAUK,GAClCE,EAAKC,SAAS,CACZd,MAAOa,EAAKZ,QAAQW,GACpBxB,YAAa,2BACbC,UAAU,OAKd0B,QAAU,SAAAJ,GACR,GAA6B,IAAzBE,EAAKd,MAAMV,UAAiB,CAC9B,IAAMuB,EAAaC,EAAKP,UAAUK,GAClCE,EAAKC,SAAS,CACZd,MAAOa,EAAKZ,QAAQW,GACpBxB,YAAa,qDACbC,UAAW,QAOjB2B,aAAe,SAAAL,GACbE,EAAKC,SAAS,CACZd,MAAOa,EAAKZ,QAAQU,GACpBvB,YAAa,yBACbC,UAAWwB,EAAKd,MAAMV,UAAY,IAGpCwB,EAAKE,QAAQJ,MAQfjB,cAAgB,SAAAuB,GACd,IAAIP,GAAW,EACTC,EAAUE,EAAKd,MAAMC,MAAMO,IAAI,SAAAC,GAInC,OAHIA,EAAKjB,KAAO0B,IACdT,EAAKC,QAAUC,GAAW,EAAOF,EAAKC,SAAU,GAE3CD,IAETE,EAAWG,EAAKH,SAASC,GAAWE,EAAKG,aAAaL,uFArEtD,IAAMO,EAAWC,KAAKb,UAAUa,KAAKpB,MAAMC,OAC3CmB,KAAKL,SAAS,CAAEd,MAAOmB,KAAKlB,QAAQiB,sCAwE/B,IAAAE,EAAAD,KACP,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,CACEhC,UAAW8B,KAAKpB,MAAMV,UACtBD,YAAa+B,KAAKpB,MAAMX,cAE1BL,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZiC,KAAKpB,MAAMC,MAAMO,IAAI,SAAAC,GAAI,OACxBzB,EAAAC,EAAAC,cAACsC,EAAD,CACEhC,GAAIiB,EAAKjB,GACTiC,IAAKhB,EAAKjB,GACVM,MAAOW,EAAKX,MACZH,cAAe0B,EAAK1B,2BA/Ff+B,aCEJC,MAJf,WACE,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,OCDTC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.68689afc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction NavBar(props) {\n  return (\n    <nav className=\"navbar sticky-top navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"https://github.com/BarbaraHernandez/clickygame\">Click Click Boom</a>\n        <p>{props.instruction}</p>\n        <p>Score: {props.gameScore} </p>\n    </nav>\n  );\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <header>\n      <div className=\"container\" id=\"header-div\">\n        <h1>CLICK CLICK BOOM</h1>\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wire(props) {\n  return (    \n    <img onClick={() => props.handleOnClick(props.id)} alt=\"\" src={props.image} />\n  );\n}\n\nexport default Wire;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport NavBar from \"../Navbar\";\nimport Header from \"../Header\";\nimport Wire from \"../Images\";\nimport wires from \"../Images/wires.json\";\n\nclass Game extends Component {\n    state = {\n        wires,\n        instruction: \"click on any wire to begin\",\n        gameScore: 0\n    };\n\n    componentDidMount() {\n      const imageSet = this.resetGame(this.state.wires);\n      this.setState({ wires: this.shuffle(imageSet)});\n    };\n\n    //randomly rearranges wire images\n    //called by continueGame and loseGame\n    shuffle = lastImageSet => {\n      let imageSet = lastImageSet.sort(() => {return 0.5 - Math.random() });\n      return imageSet;\n    };\n\n    //sets all game options back to clicked = false\n    //called by loseGame when an element is clicked twice\n    resetGame = lastImageSet => {\n      let imageSet = lastImageSet.map(wire => {\n        wire.clicked = false;\n        return wire;\n      });\n      return imageSet;\n    };\n\n    //resets state to a new game attempt, including shuffling images and resetting the score\n    //called by handleOnClick if an element has already been clicked\n    loseGame = wireMap => {\n      const resetWires = this.resetGame(wireMap);\n      this.setState({\n        wires: this.shuffle(resetWires),\n        instruction: \"Try Again! Cut any wire.\",\n        gameScore:0\n      });\n    };\n\n    //checks for win condition (all wires have been cut)\n    winGame = wireMap => {\n      if (this.state.gameScore === 8) {\n        const resetWires = this.resetGame(wireMap);\n        this.setState({\n          wires: this.shuffle(resetWires),\n          instruction: \"Congratulations! Cut any wire to start a new game.\",\n          gameScore: 0\n        });\n      }\n    }\n\n    //increments score and calls shuffle\n    //called by handleOnClick when an element is clicked for the first time\n    continueGame = wireMap => {\n      this.setState({\n        wires: this.shuffle(wireMap),\n        instruction: \"Well done! Keep going!\",\n        gameScore: this.state.gameScore + 1\n      });\n\n      this.winGame(wireMap);\n\n    };\n\n    //event handler\n    //determines whether or not an element has been clicked\n    //calls appropriate function\n    //responsible for setting clicked = true\n    handleOnClick = event => {\n      let loseGame = false;\n      const wireMap = this.state.wires.map(wire => {\n        if (wire.id === event) {\n          wire.clicked ? loseGame = true : wire.clicked = true;\n        }\n        return wire;\n      });\n      loseGame ? this.loseGame(wireMap) : this.continueGame(wireMap);\n    };\n\n  //render game elements to the page\n  render() {\n    return (\n      <div>\n        <NavBar \n          gameScore={this.state.gameScore}\n          instruction={this.state.instruction}\n        />\n        <Header />\n        <div className=\"images-div\">\n          {this.state.wires.map(wire => (\n            <Wire\n              id={wire.id}\n              key={wire.id}\n              image={wire.image}\n              handleOnClick={this.handleOnClick}\n            />\n          ))}\n        </div>\n    </div>\n    );\n  }\n\n};\n\nexport default Game;","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/game\";\n\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}